{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11479396,"sourceType":"datasetVersion","datasetId":7194792},{"sourceId":350655,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":292761,"modelId":313402}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"try:\n    import Bio\nexcept:\n    #for rhofold+ #####################\n    !pip install biopython\n    !pip install ml-collections\n    !pip install python-box\n    !pip install dm-tree\n    !pip install openmm[cuda12]\n\n\n\n\n\nfrom copy import deepcopy\n\nimport pandas as pd\nfrom Bio.PDB import Atom, Model, Chain, Residue, Structure, PDBParser\nfrom Bio import SeqIO\nimport os, sys\nimport re\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nprint('IMPORT OK !!!!')","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:16:47.068024Z","iopub.execute_input":"2025-04-22T02:16:47.068384Z","iopub.status.idle":"2025-04-22T02:17:10.149195Z","shell.execute_reply.started":"2025-04-22T02:16:47.068354Z","shell.execute_reply":"2025-04-22T02:17:10.148048Z"}},"outputs":[{"name":"stdout","text":"Collecting biopython\n  Downloading biopython-1.85-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from biopython) (1.26.4)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->biopython) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->biopython) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->biopython) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->biopython) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->biopython) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->biopython) (2024.2.0)\nDownloading biopython-1.85-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.3/3.3 MB\u001b[0m \u001b[31m29.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: biopython\nSuccessfully installed biopython-1.85\nCollecting ml-collections\n  Downloading ml_collections-1.1.0-py3-none-any.whl.metadata (22 kB)\nRequirement already satisfied: absl-py in /usr/local/lib/python3.11/dist-packages (from ml-collections) (1.4.0)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.11/dist-packages (from ml-collections) (6.0.2)\nDownloading ml_collections-1.1.0-py3-none-any.whl (76 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m76.7/76.7 kB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: ml-collections\nSuccessfully installed ml-collections-1.1.0\nRequirement already satisfied: python-box in /usr/local/lib/python3.11/dist-packages (7.3.2)\nRequirement already satisfied: dm-tree in /usr/local/lib/python3.11/dist-packages (0.1.9)\nRequirement already satisfied: absl-py>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from dm-tree) (1.4.0)\nRequirement already satisfied: attrs>=18.2.0 in /usr/local/lib/python3.11/dist-packages (from dm-tree) (25.3.0)\nRequirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.11/dist-packages (from dm-tree) (1.26.4)\nRequirement already satisfied: wrapt>=1.11.2 in /usr/local/lib/python3.11/dist-packages (from dm-tree) (1.17.2)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.21->dm-tree) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21->dm-tree) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.21->dm-tree) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.21->dm-tree) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.21->dm-tree) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.21->dm-tree) (2024.2.0)\nCollecting openmm[cuda12]\n  Downloading OpenMM-8.2.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (844 bytes)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from openmm[cuda12]) (1.26.4)\nCollecting OpenMM-CUDA-12 (from openmm[cuda12])\n  Downloading OpenMM_CUDA_12-8.2.0-py3-none-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (331 bytes)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (2025.1.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (2022.1.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->openmm[cuda12]) (2.4.1)\nRequirement already satisfied: nvidia-cuda-runtime-cu12 in /usr/local/lib/python3.11/dist-packages (from OpenMM-CUDA-12->openmm[cuda12]) (12.4.127)\nRequirement already satisfied: nvidia-cuda-nvcc-cu12 in /usr/local/lib/python3.11/dist-packages (from OpenMM-CUDA-12->openmm[cuda12]) (12.5.82)\nRequirement already satisfied: nvidia-cuda-nvrtc-cu12 in /usr/local/lib/python3.11/dist-packages (from OpenMM-CUDA-12->openmm[cuda12]) (12.4.127)\nRequirement already satisfied: nvidia-cuda-cupti-cu12 in /usr/local/lib/python3.11/dist-packages (from OpenMM-CUDA-12->openmm[cuda12]) (12.4.127)\nRequirement already satisfied: nvidia-cufft-cu12 in /usr/local/lib/python3.11/dist-packages (from OpenMM-CUDA-12->openmm[cuda12]) (11.3.3.83)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->openmm[cuda12]) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->openmm[cuda12]) (2022.1.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->openmm[cuda12]) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->openmm[cuda12]) (2024.2.0)\nRequirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cufft-cu12->OpenMM-CUDA-12->openmm[cuda12]) (12.8.93)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->openmm[cuda12]) (2024.2.0)\nDownloading OpenMM-8.2.0-cp311-cp311-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (12.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.3/12.3 MB\u001b[0m \u001b[31m78.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m:01\u001b[0m\n\u001b[?25hDownloading OpenMM_CUDA_12-8.2.0-py3-none-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (2.0 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m53.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: OpenMM-CUDA-12, openmm\nSuccessfully installed OpenMM-CUDA-12-8.2.0 openmm-8.2.0\nIMPORT OK !!!!\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"PYTHON = sys.executable\nprint('PYTHON',PYTHON)\n\nRHONET_DIR=\\\n'/kaggle/input/data-for-demo-for-rhofold-plus-with-kaggle-msa/RhoFold-main'\n#'<your downloaded rhofold repo>/RhoFold-main'\n\nUSALIGN = \\\n'/kaggle/working//USalign'\n#'<your us align path>/USalign'\n\nos.system('cp /kaggle/input/usalign/USalign /kaggle/working/')\nos.system('sudo chmod u+x /kaggle/working//USalign')\n\n\nDATA_KAGGLE_DIR = '/kaggle/input/rnafold'\nSEQ_DF = pd.read_csv(f'{DATA_KAGGLE_DIR}/train_sequences.csv')\nLABEL_DF = pd.read_csv(f'{DATA_KAGGLE_DIR}/train_labels.csv')\nLABEL_DF['target_id'] = LABEL_DF['ID'].apply(lambda x: '_'.join(x.split('_')[:-1]))\n\n\n# helper ----\nclass dotdict(dict):\n\t__setattr__ = dict.__setitem__\n\t__delattr__ = dict.__delitem__\n\n\tdef __getattr__(self, name):\n\t\ttry:\n\t\t\treturn self[name]\n\t\texcept KeyError:\n\t\t\traise AttributeError(name)\n\n# visualisation helper ----\ndef set_aspect_equal(ax):\n\tx_limits = ax.get_xlim()\n\ty_limits = ax.get_ylim()\n\tz_limits = ax.get_zlim()\n\n\t# Compute the mean of each axis\n\tx_middle = np.mean(x_limits)\n\ty_middle = np.mean(y_limits)\n\tz_middle = np.mean(z_limits)\n\n\t# Compute the max range across all axes\n\tmax_range = max(x_limits[1] - x_limits[0],\n\t\t\t\t\ty_limits[1] - y_limits[0],\n\t\t\t\t\tz_limits[1] - z_limits[0]) / 2.0\n\n\t# Set the new limits to ensure equal scaling\n\tax.set_xlim(x_middle - max_range, x_middle + max_range)\n\tax.set_ylim(y_middle - max_range, y_middle + max_range)\n\tax.set_zlim(z_middle - max_range, z_middle + max_range)\n\n\n\n\n# xyz df helper --------------------\ndef get_truth_df(target_id):\n    truth_df = LABEL_DF[LABEL_DF['target_id'] == target_id]\n    truth_df = truth_df.reset_index(drop=True)\n    return truth_df\n\ndef parse_pdb_to_df(pdb_file, target_id):\n    parser = PDBParser()\n    structure = parser.get_structure('', pdb_file)\n\n    df = []\n    for model in structure:\n        for chain in model:\n            print(chain)\n            chain_data = []\n            for residue in chain:\n                # print(residue)\n                if residue.get_resname() in ['A', 'U', 'G', 'C']:\n                    # Check if the residue has a C1' atom\n                    if 'C1\\'' in residue:\n                        atom = residue['C1\\'']\n                        xyz = atom.get_coord()\n                        resname = residue.get_resname()\n                        resid = residue.get_id()[1]\n\n                        #todo detect discontinous: resid = prev_resid+1\n                        #ID\tresname\tresid\tx_1\ty_1\tz_1\n                        chain_data.append(dict(\n                            ID = target_id+'_'+str(resid),\n                            resname=resname,\n                            resid=resid,\n                            x_1=xyz[0],\n                            y_1=xyz[1],\n                            z_1=xyz[2],\n                        ))\n                        ##print(f\"Residue {resname} {resid}, Atom: {atom.get_name()}, xyz: {xyz}\")\n\n            if len(chain_data)!=0:\n                chain_df = pd.DataFrame(chain_data)\n                df.append(chain_df)\n                ##print(chain_df)\n    return df\n\n# usalign helper --------------------\ndef write_target_line(\n    atom_name, atom_serial, residue_name, chain_id, residue_num, x_coord, y_coord, z_coord, occupancy=1.0, b_factor=0.0, atom_type='P'\n):\n    \"\"\"\n    Writes a single line of PDB format based on provided atom information.\n\n    Args:\n        atom_name (str): Name of the atom (e.g., \"N\", \"CA\").\n        atom_serial (int): Atom serial number.\n        residue_name (str): Residue name (e.g., \"ALA\").\n        chain_id (str): Chain identifier.\n        residue_num (int): Residue number.\n        x_coord (float): X coordinate.\n        y_coord (float): Y coordinate.\n        z_coord (float): Z coordinate.\n        occupancy (float, optional): Occupancy value (default: 1.0).\n        b_factor (float, optional): B-factor value (default: 0.0).\n\n    Returns:\n        str: A single line of PDB string.\n    \"\"\"\n    return f'ATOM  {atom_serial:>5d}  {atom_name:<5s} {residue_name:<3s} {residue_num:>3d}    {x_coord:>8.3f}{y_coord:>8.3f}{z_coord:>8.3f}{occupancy:>6.2f}{b_factor:>6.2f}           {atom_type}\\n'\n\ndef write_xyz_to_pdb(df, pdb_file, xyz_id = 1):\n    resolved_cnt = 0\n    with open(pdb_file, 'w') as target_file:\n        for _, row in df.iterrows():\n            x_coord = row[f'x_{xyz_id}']\n            y_coord = row[f'y_{xyz_id}']\n            z_coord = row[f'z_{xyz_id}']\n\n            if x_coord > -1e17 and y_coord > -1e17 and z_coord > -1e17:\n                resolved_cnt += 1\n                target_line = write_target_line(\n                    atom_name=\"C1'\",\n                    atom_serial=int(row['resid']),\n                    residue_name=row['resname'],\n                    chain_id='0',\n                    residue_num=int(row['resid']),\n                    x_coord=x_coord,\n                    y_coord=y_coord,\n                    z_coord=z_coord,\n                    atom_type='C',\n                )\n                target_file.write(target_line)\n    return resolved_cnt\n\ndef parse_usalign_for_tm_score(output):\n    # Extract TM-score based on length of reference structure (second)\n    tm_score_match = re.findall(r'TM-score=\\s+([\\d.]+)', output)[1]\n    if not tm_score_match:\n        raise ValueError('No TM score found')\n    return float(tm_score_match)\n\ndef parse_usalign_for_transform(output):\n    # Locate the rotation matrix section\n    matrix_lines = []\n    found_matrix = False\n\n    for line in output.splitlines():\n        if \"The rotation matrix to rotate Structure_1 to Structure_2\" in line:\n            found_matrix = True\n        elif found_matrix and re.match(r'^\\d+\\s+[-\\d.]+\\s+[-\\d.]+\\s+[-\\d.]+\\s+[-\\d.]+$', line):\n            matrix_lines.append(line)\n        elif found_matrix and not line.strip():\n            break  # Stop parsing if an empty line is encountered after the matrix\n\n    # Parse the rotation matrix values\n    rotation_matrix = []\n    for line in matrix_lines:\n        parts = line.split()\n        row_values = list(map(float, parts[1:]))  # Skip the first column (index)\n        rotation_matrix.append(row_values)\n\n    return np.array(rotation_matrix)\n\ndef call_usalign(predict_df, truth_df, verbose=1):\n    truth_pdb = '~truth.pdb'\n    predict_pdb = '~predict.pdb'\n    write_xyz_to_pdb(predict_df, predict_pdb, xyz_id=1)\n    write_xyz_to_pdb(truth_df, truth_pdb, xyz_id=1)\n\n    command = f'{USALIGN} {predict_pdb} {truth_pdb} -atom \" C1\\'\" -m -'\n    output = os.popen(command).read()\n    if verbose==1:\n        print(output)\n    tm_score = parse_usalign_for_tm_score(output)\n    transform = parse_usalign_for_transform(output)\n    return tm_score, transform\n\n\n# msa helper --------------------\ndef read_msa(msa_file):\n    f = open(msa_file, 'r')\n    line = f.readlines()\n\n    msa = []\n    for i in range(0, len(line),2):\n        m = dotdict(\n            comment =line[i],\n            seqence =line[i+1],\n        )\n        assert(m.comment[0]=='>')\n        msa.append(m)\n    return msa\n\n\ndef write_msa(msa_file, msa):\n    line=[]\n    for m in msa:\n        line .append(m.comment)\n        line .append(m.seqence)\n\n    f = open(msa_file, 'wt')\n    f.writelines(line)\n    return msa\n \ndef msa_to_rhonet_file(msa_file, num_msa=5, out_dir='',target_id='xxx'):\n    msa = read_msa(msa_file)\n    msa0 = deepcopy(msa[0])\n    msa0.comment =f'>{target_id}\\n'\n    msa0 = [msa0]\n\n    a3m_file = f'{out_dir}/{target_id}.a3m'\n    fasta_file = f'{out_dir}/{target_id}.fasta'\n    os.makedirs(out_dir, exist_ok=True)\n\n    write_msa(fasta_file, msa0)\n    write_msa(a3m_file, msa[:num_msa])\n\nprint('HELPER OK!!!')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:17:10.151184Z","iopub.execute_input":"2025-04-22T02:17:10.151500Z","iopub.status.idle":"2025-04-22T02:17:10.595757Z","shell.execute_reply.started":"2025-04-22T02:17:10.151475Z","shell.execute_reply":"2025-04-22T02:17:10.594921Z"}},"outputs":[{"name":"stdout","text":"PYTHON /usr/bin/python3\n","output_type":"stream"},{"name":"stderr","text":"cp: cannot stat '/kaggle/input/usalign/USalign': No such file or directory\nchmod: cannot access '/kaggle/working//USalign': No such file or directory\n","output_type":"stream"},{"name":"stdout","text":"HELPER OK!!!\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"#start here!!!\n\n\nout_dir   ='/kaggle/working/'\ntarget_id = '1EIY_C'.upper()\nsequence  = 'GCCGAGGUAGCUCAGUUGGUAGAGCAUGCGACUGAAAAUCGCAGUGUCCGCGGUUCGAUUCCGCGCCUCGGCACCA'\nprint('len(sequence):',len(sequence))\n\n\n#1. prepare input\nmsa_file = f'{DATA_KAGGLE_DIR}/MSA/1EIY_C.MSA.fasta'\nmsa_to_rhonet_file(msa_file, num_msa=5, out_dir=out_dir,target_id=target_id)\n\ncmd1 = f'cd {RHONET_DIR}'\n#cmd2 = f'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6' #optional if you have lib error\ncmd3 = f'{PYTHON} inference.py --input_fas {out_dir}/{target_id}.fasta --input_a3m {out_dir}/{target_id}.a3m --output_dir {out_dir}/ --ckpt ./pretrained/model_20221010_params.pt'\n\n#follow rhofold repo, we use the cmdline:\n#'python inference.py --input_fas ./example/input/3owzA/3owzA.fasta --input_a3m ./example/input/3owzA/3owzA.a3m --output_dir ./example/output/3owzA/ --ckpt ./pretrained/model_20221010_params.pt'\n\n#do inference here!\n#output = os.popen(cmd1+';'+cmd2+';'+cmd3).read()\noutput = os.popen(cmd1+';'+cmd3).read()\nprint(output)\n\n#copy file from local results\n#local_result = '/kaggle/input/data-for-demo-for-rhofold-plus-with-kaggle-msa/rhofold_input_output/.'\n#!cp -a $local_result $out_dir\n\n#expected ouput from rtx A6000 (non ada)\n'''\n2025-03-14 20:40:50,182 - INFO: Constructing RhoFold\n2025-03-14 20:40:51,221 - INFO:     loading ./pretrained/model_20221010_params.pt\n2025-03-14 20:40:51,743 - INFO: Input_fas /media/hp/c30d34ed-0d55-4077-82dc-b56cd13dd548/2025/kaggle/stanford-rna-3d-folding/result/rhofold_00/1EIY_C.fasta\n2025-03-14 20:40:51,743 - INFO: Input_a3m /media/hp/c30d34ed-0d55-4077-82dc-b56cd13dd548/2025/kaggle/stanford-rna-3d-folding/result/rhofold_00/1EIY_C.a3m\n2025-03-14 20:40:51,743 - INFO: Started RhoFold Inference\n2025-03-14 20:40:51,755 - INFO:     Inference using device cuda\n2025-03-14 20:40:54,523 - INFO:     Export PDB file to /media/hp/c30d34ed-0d55-4077-82dc-b56cd13dd548/2025/kaggle/stanford-rna-3d-folding/result/rhofold_00//unrelaxed_model.pdb\n2025-03-14 20:40:54,523 - INFO: Finished RhoFold Inference in 2.780 seconds\n2025-03-14 20:40:54,523 - INFO: Started Amber Relaxation : 1000 iterations\n2025-03-14 20:40:54,523 - INFO:     AmberRelaxation: Using OpenCL\n2025-03-14 20:41:09,410 - INFO:     Minimizing ...\n2025-03-14 20:42:38,203 - INFO:     Energy at Minima is -505932.780 kcal/mol\n2025-03-14 20:42:38,362 - INFO:     Export PDB file to /media/hp/c30d34ed-0d55-4077-82dc-b56cd13dd548/2025/kaggle/stanford-rna-3d-folding/result/rhofold_00//relaxed_1000_model.pdb\n2025-03-14 20:42:38,363 - INFO: Finished Amber Relaxation : 1000 iterations in 103.840 seconds\n'''\n\n#expected ouput from P100\n'''\nlen(sequence): 76\n2025-03-14 16:03:33,110 - INFO: Constructing RhoFold\n2025-03-14 16:03:34,429 - INFO:     loading ./pretrained/model_20221010_params.pt\n2025-03-14 16:03:35,088 - INFO: Input_fas /kaggle/working//1EIY_C.fasta\n2025-03-14 16:03:35,089 - INFO: Input_a3m /kaggle/working//1EIY_C.a3m\n2025-03-14 16:03:35,089 - INFO: Started RhoFold Inference\n2025-03-14 16:03:35,093 - INFO:     Inference using device cuda\n2025-03-14 16:03:40,177 - INFO:     Export PDB file to /kaggle/working///unrelaxed_model.pdb\n2025-03-14 16:03:40,177 - INFO: Finished RhoFold Inference in 5.088 seconds\n2025-03-14 16:03:40,177 - INFO: Started Amber Relaxation : 1000 iterations\n2025-03-14 16:03:40,177 - INFO:     AmberRelaxation: Using OpenCL\n2025-03-14 16:04:03,056 - INFO:     Minimizing ...\n2025-03-14 16:08:49,875 - INFO:     Energy at Minima is -497896.334 kcal/mol\n2025-03-14 16:08:50,044 - INFO:     Export PDB file to /kaggle/working///relaxed_1000_model.pdb\n2025-03-14 16:08:50,047 - INFO: Finished Amber Relaxation : 1000 iterations in 309.869 seconds\n\n'''","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:17:10.596736Z","iopub.execute_input":"2025-04-22T02:17:10.597012Z","iopub.status.idle":"2025-04-22T02:17:10.800507Z","shell.execute_reply.started":"2025-04-22T02:17:10.596990Z","shell.execute_reply":"2025-04-22T02:17:10.799600Z"}},"outputs":[{"name":"stdout","text":"len(sequence): 76\n\n","output_type":"stream"},{"name":"stderr","text":"/bin/sh: 1: cd: can't cd to /kaggle/input/data-for-demo-for-rhofold-plus-with-kaggle-msa/RhoFold-main\n/usr/bin/python3: can't open file '/kaggle/working/inference.py': [Errno 2] No such file or directory\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"'\\nlen(sequence): 76\\n2025-03-14 16:03:33,110 - INFO: Constructing RhoFold\\n2025-03-14 16:03:34,429 - INFO:     loading ./pretrained/model_20221010_params.pt\\n2025-03-14 16:03:35,088 - INFO: Input_fas /kaggle/working//1EIY_C.fasta\\n2025-03-14 16:03:35,089 - INFO: Input_a3m /kaggle/working//1EIY_C.a3m\\n2025-03-14 16:03:35,089 - INFO: Started RhoFold Inference\\n2025-03-14 16:03:35,093 - INFO:     Inference using device cuda\\n2025-03-14 16:03:40,177 - INFO:     Export PDB file to /kaggle/working///unrelaxed_model.pdb\\n2025-03-14 16:03:40,177 - INFO: Finished RhoFold Inference in 5.088 seconds\\n2025-03-14 16:03:40,177 - INFO: Started Amber Relaxation : 1000 iterations\\n2025-03-14 16:03:40,177 - INFO:     AmberRelaxation: Using OpenCL\\n2025-03-14 16:04:03,056 - INFO:     Minimizing ...\\n2025-03-14 16:08:49,875 - INFO:     Energy at Minima is -497896.334 kcal/mol\\n2025-03-14 16:08:50,044 - INFO:     Export PDB file to /kaggle/working///relaxed_1000_model.pdb\\n2025-03-14 16:08:50,047 - INFO: Finished Amber Relaxation : 1000 iterations in 309.869 seconds\\n\\n'"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"#visualise prediction and compute tm score\n\npredict_relax_df = parse_pdb_to_df(f'{out_dir}/relaxed_1000_model.pdb', target_id)\npredict_unrelax_df = parse_pdb_to_df(f'{out_dir}/unrelaxed_model.pdb', target_id)\n\nassert len(predict_relax_df)==1\nassert len(predict_unrelax_df)==1\npredict_relax_df = predict_relax_df[0]\npredict_unrelax_df = predict_unrelax_df[0]\n\nprint(predict_relax_df)\nprint(predict_unrelax_df)\n\ntruth_df = get_truth_df(target_id)\nprint(truth_df)\n\ntm_score_relax, transform_relax = call_usalign(predict_relax_df, truth_df, verbose=1)\ntm_score_unrelax, transform_unrelax= call_usalign(predict_unrelax_df, truth_df, verbose=0)\n\nprint('tm_score_relax', tm_score_relax)\nprint('tm_score_unrelax', tm_score_unrelax)\nprint('transform_relax\\n', transform_relax)\nprint('transform_unrelax\\n', transform_unrelax)\nzz=0\n\nif 1:\n    COLOR = ['red', 'blue', 'green', 'black', 'yellow', 'cyan', 'magenta']\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n    # ax.clear()\n\n    #unrelax\n    coord = predict_unrelax_df[['x_1', 'y_1', 'z_1']].to_numpy().astype('float32')\n    coord = coord@transform_unrelax[:,1:].T + transform_unrelax[:,[0]].T\n    x, y, z = coord[:, 0], coord[:, 1], coord[:, 2]\n    ax.scatter(x, y, z, c='red', s=30, alpha=1)\n    ax.plot(x, y, z, color='red', linewidth=1, alpha=1, label=f'unrelax (tm:{tm_score_unrelax:0.3f})')\n\n\n    #relax\n    coord = predict_relax_df[['x_1', 'y_1', 'z_1']].to_numpy().astype('float32')\n    coord = coord@transform_relax[:,1:].T + transform_relax[:,[0]].T\n    x, y, z = coord[:, 0], coord[:, 1], coord[:, 2]\n    ax.scatter(x, y, z, c='orange', s=30, alpha=1)\n    ax.plot(x, y, z, color='orange', linewidth=1, alpha=1, label=f'relax (tm:{tm_score_relax:0.3f})')\n\n    # truth\n    truth = truth_df[['x_1', 'y_1', 'z_1']].to_numpy().astype('float32')\n    x, y, z = truth[:, 0], truth[:, 1], truth[:, 2]\n    ax.scatter(x, y, z, c='black', s=30, alpha=1)\n    ax.plot(x, y, z, color='black', linewidth=1, alpha=1, label=f'truth')\n\n    set_aspect_equal(ax)\n    plt.legend()\n    plt.show()\n    # plt.waitforbuttonpress()\n    plt.close()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-22T02:17:10.802298Z","iopub.execute_input":"2025-04-22T02:17:10.803062Z","iopub.status.idle":"2025-04-22T02:17:10.853026Z","shell.execute_reply.started":"2025-04-22T02:17:10.802990Z","shell.execute_reply":"2025-04-22T02:17:10.851750Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_31/456137949.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#visualise prediction and compute tm score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpredict_relax_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_pdb_to_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{out_dir}/relaxed_1000_model.pdb'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mpredict_unrelax_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_pdb_to_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'{out_dir}/unrelaxed_model.pdb'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_31/465419100.py\u001b[0m in \u001b[0;36mparse_pdb_to_df\u001b[0;34m(pdb_file, target_id)\u001b[0m\n\u001b[1;32m     63\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mparse_pdb_to_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpdb_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPDBParser\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m     \u001b[0mstructure\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m''\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpdb_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m     \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/Bio/PDB/PDBParser.py\u001b[0m in \u001b[0;36mget_structure\u001b[0;34m(self, id, file)\u001b[0m\n\u001b[1;32m     83\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstructure_builder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit_structure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 85\u001b[0;31m             \u001b[0;32mwith\u001b[0m \u001b[0mas_handle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m                 \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mlines\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    135\u001b[0m         \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mRuntimeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"generator didn't yield\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/Bio/File.py\u001b[0m in \u001b[0;36mas_handle\u001b[0;34m(handleish, mode, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m     \"\"\"\n\u001b[1;32m     71\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandleish\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/kaggle/working//relaxed_1000_model.pdb'"],"ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: '/kaggle/working//relaxed_1000_model.pdb'","output_type":"error"}],"execution_count":19}]}